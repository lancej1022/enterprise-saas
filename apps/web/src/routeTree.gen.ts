/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as authenticatedRouteImport } from './routes/(authenticated)/route'
import { Route as authenticatedIndexImport } from './routes/(authenticated)/index'
import { Route as authenticatedAdminUsersIndexImport } from './routes/(authenticated)/admin/users/index'
import { Route as authenticatedAdminTeamsIndexImport } from './routes/(authenticated)/admin/teams/index'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedRouteRoute = authenticatedRouteImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedIndexRoute = authenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authenticatedAdminUsersIndexRoute =
  authenticatedAdminUsersIndexImport.update({
    id: '/admin/users/',
    path: '/admin/users/',
    getParentRoute: () => authenticatedRouteRoute,
  } as any)

const authenticatedAdminTeamsIndexRoute =
  authenticatedAdminTeamsIndexImport.update({
    id: '/admin/teams/',
    path: '/admin/teams/',
    getParentRoute: () => authenticatedRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)/': {
      id: '/(authenticated)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedIndexImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/(authenticated)/admin/teams/': {
      id: '/(authenticated)/admin/teams/'
      path: '/admin/teams'
      fullPath: '/admin/teams'
      preLoaderRoute: typeof authenticatedAdminTeamsIndexImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/(authenticated)/admin/users/': {
      id: '/(authenticated)/admin/users/'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof authenticatedAdminUsersIndexImport
      parentRoute: typeof authenticatedRouteImport
    }
  }
}

// Create and export the route tree

interface authenticatedRouteRouteChildren {
  authenticatedIndexRoute: typeof authenticatedIndexRoute
  authenticatedAdminTeamsIndexRoute: typeof authenticatedAdminTeamsIndexRoute
  authenticatedAdminUsersIndexRoute: typeof authenticatedAdminUsersIndexRoute
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedIndexRoute: authenticatedIndexRoute,
  authenticatedAdminTeamsIndexRoute: authenticatedAdminTeamsIndexRoute,
  authenticatedAdminUsersIndexRoute: authenticatedAdminUsersIndexRoute,
}

const authenticatedRouteRouteWithChildren =
  authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof authenticatedIndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/admin/teams': typeof authenticatedAdminTeamsIndexRoute
  '/admin/users': typeof authenticatedAdminUsersIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/': typeof authenticatedIndexRoute
  '/admin/teams': typeof authenticatedAdminTeamsIndexRoute
  '/admin/users': typeof authenticatedAdminUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(authenticated)': typeof authenticatedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/(authenticated)/': typeof authenticatedIndexRoute
  '/(authenticated)/admin/teams/': typeof authenticatedAdminTeamsIndexRoute
  '/(authenticated)/admin/users/': typeof authenticatedAdminUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/signup' | '/admin/teams' | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/signup' | '/' | '/admin/teams' | '/admin/users'
  id:
    | '__root__'
    | '/(authenticated)'
    | '/login'
    | '/signup'
    | '/(authenticated)/'
    | '/(authenticated)/admin/teams/'
    | '/(authenticated)/admin/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(authenticated)",
        "/login",
        "/signup"
      ]
    },
    "/(authenticated)": {
      "filePath": "(authenticated)/route.tsx",
      "children": [
        "/(authenticated)/",
        "/(authenticated)/admin/teams/",
        "/(authenticated)/admin/users/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/(authenticated)/": {
      "filePath": "(authenticated)/index.tsx",
      "parent": "/(authenticated)"
    },
    "/(authenticated)/admin/teams/": {
      "filePath": "(authenticated)/admin/teams/index.tsx",
      "parent": "/(authenticated)"
    },
    "/(authenticated)/admin/users/": {
      "filePath": "(authenticated)/admin/users/index.tsx",
      "parent": "/(authenticated)"
    }
  }
}
ROUTE_MANIFEST_END */

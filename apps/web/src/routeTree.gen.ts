/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as authenticatedAuthenticatedImport } from './routes/(authenticated)/_authenticated'
import { Route as authenticatedAuthenticatedIndexImport } from './routes/(authenticated)/_authenticated.index'

// Create Virtual Routes

const authenticatedImport = createFileRoute('/(authenticated)')()

// Create/Update Routes

const authenticatedRoute = authenticatedImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRoute,
} as any)

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedAuthenticatedRoute = authenticatedAuthenticatedImport.update(
  {
    id: '/_authenticated',
    getParentRoute: () => authenticatedRoute,
  } as any,
)

const authenticatedAuthenticatedIndexRoute =
  authenticatedAuthenticatedIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => authenticatedAuthenticatedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)/_authenticated': {
      id: '/(authenticated)/_authenticated'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedAuthenticatedImport
      parentRoute: typeof authenticatedRoute
    }
    '/(authenticated)/_authenticated/': {
      id: '/(authenticated)/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedAuthenticatedIndexImport
      parentRoute: typeof authenticatedAuthenticatedImport
    }
  }
}

// Create and export the route tree

interface authenticatedAuthenticatedRouteChildren {
  authenticatedAuthenticatedIndexRoute: typeof authenticatedAuthenticatedIndexRoute
}

const authenticatedAuthenticatedRouteChildren: authenticatedAuthenticatedRouteChildren =
  {
    authenticatedAuthenticatedIndexRoute: authenticatedAuthenticatedIndexRoute,
  }

const authenticatedAuthenticatedRouteWithChildren =
  authenticatedAuthenticatedRoute._addFileChildren(
    authenticatedAuthenticatedRouteChildren,
  )

interface authenticatedRouteChildren {
  authenticatedAuthenticatedRoute: typeof authenticatedAuthenticatedRouteWithChildren
}

const authenticatedRouteChildren: authenticatedRouteChildren = {
  authenticatedAuthenticatedRoute: authenticatedAuthenticatedRouteWithChildren,
}

const authenticatedRouteWithChildren = authenticatedRoute._addFileChildren(
  authenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/': typeof authenticatedAuthenticatedIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/': typeof authenticatedAuthenticatedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/(authenticated)': typeof authenticatedRouteWithChildren
  '/(authenticated)/_authenticated': typeof authenticatedAuthenticatedRouteWithChildren
  '/(authenticated)/_authenticated/': typeof authenticatedAuthenticatedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/signup' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/signup' | '/'
  id:
    | '__root__'
    | '/login'
    | '/signup'
    | '/(authenticated)'
    | '/(authenticated)/_authenticated'
    | '/(authenticated)/_authenticated/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  authenticatedRoute: typeof authenticatedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  authenticatedRoute: authenticatedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/login",
        "/signup",
        "/(authenticated)"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/(authenticated)": {
      "filePath": "(authenticated)",
      "children": [
        "/(authenticated)/_authenticated"
      ]
    },
    "/(authenticated)/_authenticated": {
      "filePath": "(authenticated)/_authenticated.tsx",
      "parent": "/(authenticated)",
      "children": [
        "/(authenticated)/_authenticated/"
      ]
    },
    "/(authenticated)/_authenticated/": {
      "filePath": "(authenticated)/_authenticated.index.tsx",
      "parent": "/(authenticated)/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */

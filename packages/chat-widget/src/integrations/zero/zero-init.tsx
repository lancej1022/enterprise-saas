import { useMemo } from "react";
import type { Zero } from "@rocicorp/zero";
import { ZeroProvider } from "@rocicorp/zero/react";
import { useRouter } from "@tanstack/react-router";
import { Cookies } from "react-cookie";
import { createMutators } from "@solved-contact/auth-server/zero/mutators";
import type { Mutators } from "@solved-contact/auth-server/zero/mutators";
import { schema } from "@solved-contact/auth-server/zero/schema";
import type { Schema } from "@solved-contact/auth-server/zero/schema";

import { must } from "#/shared/must";

if (typeof import.meta.env === "undefined") {
  // @ts-expect-error -- this is a hack to make sure `import.meta.env` doesnt crash playwright
  import.meta.env = {};
}

// TODO: this eventually needs to be hardcoded to a public server URL otherwise it wont work for consumers...
const serverURL = must<string>(
  // TODO: the only reason we need the `process.env` fallback is because playwright somehow trips over `import.meta.env`
  import.meta.env.VITE_PUBLIC_SERVER ||
    (typeof process !== "undefined"
      ? process.env.VITE_PUBLIC_SERVER
      : undefined),
  "VITE_PUBLIC_SERVER is required",
);

export function ZeroInit({ children }: { children: React.ReactNode }) {
  const router = useRouter();
  //   const { session } = router.options.context;

  const opts = useMemo(() => {
    return {
      schema,
      // TODO: this should come from the mock session generated by the better auth API Key I think?
      userID: "anon",
      // TODO: low confidence that this is correct..
      // auth: session.zeroAuth,
      auth: zeroAuth,
      server: serverURL,
      mutators: createMutators(
        // TODO: this should come from the mock session generated by the better auth API Key I think?
        {
          sub: "anon",
          activeOrganizationId: "anon",
        },
      ),
      init: async (zero: Zero<Schema, Mutators>) => {
        router.update({
          context: {
            ...router.options.context,
            zero,
          },
        });

        await router.invalidate();
      },
    };
  }, [router]);

  return <ZeroProvider {...opts}>{children}</ZeroProvider>;
}

// TODO: Need to verify whether this actually works after consolidating this logic from `web` into `auth-server`
async function zeroAuth(error?: "invalid-token") {
  if (error) {
    // TODO: Pull the URL from the env
    await fetch("http://localhost:3000/api/zero/refresh", {
      credentials: "include",
    });
  }
  return new Cookies().get<string | undefined>("jwt");
}
